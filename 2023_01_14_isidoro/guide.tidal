




do
  let cc c n p = control p # s "midi" # ctlNum n # midicmd "control" # midichan c
      ns p = note (scale "lydian"  p)
      b = "[0 <2 3> 0 <0 -1>]/16"
      -- b = "[0 3 0 -1]/16"
  hush
  d0 $ slow 2 $  s "bd:3" # gain 1.1
  d1 $ every 4 (#accelerate 2) $sometimesBy 0.8 (slow 2) $ within (0.25,1) (sometimes (#coarse 10).(jux rev)) $ shuffle 4 $ s "sn:2 hh sh:4 hh "
    + dilei 0.3 "[0.25|0.125|0.33]" 0.3
    # hpf 700
    # lpf (slow 4 $ range 900 2000 $ sine)
    # lpq (slow 5.4 $ perlin*0.2)
  d2 $ sometimes (fast 2) $ slow 8 $ shuffle 16 $  striate 32 $ s "drums"
    # hpf 1700
    # dilei 0.5 0.5 0.4
    # gain 0
  m1 $  ns ( (sometimes (0.25 ~>) $ "[0,2,4,<8 9 7>]/4") |+ b)
  m2 $  ns ("[0 [0|4|6]? [7|~|0|~] 0]" |+ b - 14 )
  m3 $ whenmod 4 2 (#ns "~") $  degradeBy 0.7 $  (0.25 ~>) $ ns (("<0*2 0*4 0*6>" |+ (irand 14)) |+ "[1 <~ 2>]/4" ) # legato 2






  
do
  let cc c n p = control p # s "midi" # ctlNum n # midicmd "control" # midichan c
      ns p = note (scale "majPent"  p)
      -- ns p = note (scale "ritusen"  p)
      -- ns p = note (scale "<lydian ionian>"  p)
      b = "[0 -3 -2 -1 ]/16"
  setcps 1
  hush
  d2 $ slow "8 <4 8>" $ shuffle 16 $  striate 32 $ s "drums"
    # hpf 1900
    # dilei 0.5 0.5 0.4
    # gain 0.75
  p "cutoff" $ cc 4 71 ("0*32" |+  range 20 50 ( slow 5 $ perlin))
  p "cutoff2" $ cc 5 71 ("0*32" |+  range 30 60 ( slow 6.6 $ perlin))
  m5 $whenmod 16 8 (degradeBy 1) $  stack[ 
    slow 3.3 $ degrade $  iter 4 $ ns ("[0 3 5 2]/4" ) ,
    slow 16 $ shuffle 8 $  ns("0*64?" |+ "[ [0..16] [15|17|18]? [0..7] [16..0] ]" -7 ),
    silence]
   # sus 1
  m6 $ (4 ~>) $ whenmod 16 8 (degradeBy 1) $  stack[ 
    slow 3.3 $ degrade $  iter 4 $ ns ("[0 3 5 2]" ) ,
    slow 4.3 $ degrade $  ns ("<4 5 6>" |+ (irand 3) ) ,
    slow 16 $ shuffle 8 $  ns("0*16?" |+ "[ [0..16] [15|17|18]? [0..7] [16..0] ]" -7 ),
    silence]
  d0 $ slow 2 $ struct "1100 0000" $  s "bd:4 " 
   # gain 1.15
  m5 silence
  -- m6 silence
  m1 $  ns ((slow 2 $ "[0@2]/2") |+ "[0,2,3]" |+ (irand 4) )
  m1 silence
  m2 $  ns (slow 2 $ struct "1100100 1?"  $ "{ 0 0 ~ 5 0 1 2 0 ~  }%8" |+ "[-5]" |+ (irand 5) )
    # sus (slow 6 $ perlin*0.4)
  m3 $ every 4 (iter 4) $ stack[
   struct "11001010" $ ns (("[0 1 2? 0]" |* (irand 7))  |- 5),
   ns (struct (iter 8 $  "11001010") $ (iter 4 $ run 9)  |- 0),
   silence]
  p "cutoff3" $ cc 2 71 ("0*32" |+  range 0 100 ( slow 16 $ (slow 4 $ sine*0.3) + sine*0.3 + 0.4))
  p "filter3" $ cc 2 74 ("0*32" |+  range 0 90 ( slow 30 $ sine))


-- #3 aphex twin
do
  let cc c n p = control p # s "midi" # ctlNum n # midicmd "control" # midichan c
      ns p = note (scale "aeolian"  p)
  hush
  setcps 0.1
  d0 $ struct "100010000" $  s "bd:4 " 
  m2 $ stack[
   ns ("0@3 ~  2 -1 -2 ~ ~" |- 7),
   silence]
  m7 $ stack[
   ns ("0@3 ~  2 -1 -2 ~ ~" |- 7),
   ns ("[2,5,7] [0,2,4]@2 ~ [2,6] [-1,1,3] [-2,0,2]  ~ ~" ),
   ns ("6 5 4 ~  3 2  4 ~ ~" |+ 7),
   silence]
  m1 $ ns "0 2"
  m6 $ stack[
   ns ("[2,5,7] [0,2,4]@2 ~ [2,6] [-1,1,3] [-2,0,2]  ~ ~" ),
   ns ("7 4@2 ~ 6 3 2  ~ ~" |+ 7 ),
   ns ("6 5 4 ~  3 2  4 ~ ~" |+ 0),
   -- ns ("8 9 10 ~  11 12  13 ~ ~" |+ 0),
   silence]
   -- # cps (slow 4 $ range 0.05 0.1 $ sine)

panic

hush

-- dust and shadow
do
  let cc c n p = control p # s "midi" # ctlNum n # midicmd "control" # midichan c
      ns p = note (scale "ionian"  p)
  hush
  panic
  setcps 1
  m1 $ stack[
    ns (struct "t(3,8,<0 1>)" $  "[0,1,5]"),
    silence]
  m8 $ stack[
    ns "0*8",
    ns "2(3,8,<0 1 2>)",
    ns "[11(1,8,<0 1 2>)]/2",
    silence] 
    # sus (slow 8 $ perlin*0.3)


-- dust and shadow
do
  let cc c n p = control p # s "midi" # ctlNum n # midicmd "control" # midichan c
      ns p = note (scale "ionian"  p)
  hush
  -- panic
  setcps 1
  m3 $ stack[
    ns "0*8",
    ns "4(3,8,<0 1 2>)",
    ns "[11(1,8,<0 1 2>)]/2",
    ns "[13(1,8,<0 1>)]",
    silence] 
    # sus (slow 8 $ perlin*0.7)
  m1 $ stack[
    ns (struct "t(3,8,<0 1>)" $  "[0,1,5]"),
    silence]
  m2 $ slow 8 $ ns ("-14" |+ (irand 6))
    # amp (slow 8 $ 0.7 + rand*0.2)
  m2 $ slow 8 $ ns ("-7" |+ (irand 6))
  d0 $ s "[bd:5]/2"


-- dust and shadow
do
  let cc n p = ccv (range 0 127 $ "0*256" |+ p) # ccn n
      ns p = note (scale "majPent"  (p |+ "[0 -1 -2]/32"))
  hush
  -- panic
  setcps 1
  m1 $ stack[
    c1 (slow 16.6 $ sine),
    c2 (slow 22 $ sine),
    c3 (slow 26 $ sine),
    c4 (slow 27.7 $ sine),
    -- ns "[0 2 1 5 4 3 ]",
    degradeBy 0.86 $ ns ("[14|12|11|9]" ),
    ns ("-8" ),
    ns ("-4" ),
    ns ("-1" ),
    -- slow 8 $ (0.25 ~>) $ shuffle 4 $ ns ((run 16) ),
    silence] 
    -- # sus (slow 8 $ perlin*0.7)
  m2 $ stack[
    ns (slow 8 $ "-5" ),
    silence] 
  m3 $ stack[
    -- ns ( "[0 2 1 5 4 3 ]" |+ (run "<5 6 7 8 9 10 11 12>")),
    -- ns ( ((1/16) ~>).(+2) $  "[0 2 1 5 4 3 ]" |+ (run "<5 6 7 8 9 10 11 12>")),
    --ns ( off "<0.5 0.25 0.125>" (slow (every 4 (const $ "1") $ "2 4")).(+"<5 5 5 7>") $  "[0 2 1 5 4 3 ]"),
    silence] 

  d1 $ jux (rev) $ slow 16 $ shuffle 1 $ striate' 512 (1/512*32) $ s "chant"
    # hpf 2000
    # n "[0,3]"
    # dilei 0.5 0.5 0.5
















do
  let ns p = note (scale "majPent" p) |+| x (fromIntegral <$> p)*0.1
      root = "[0 -1 -2]/32"
      melo0 = (slow 8 $segment 8 $  perlin*5 + irand 3)
      melo = round <$> melo0 
  hush
  -- panic
  setcps 1
  m1 $ stack[
    stack[
    ns (iter 4 $ run 4 |+ root) |+| x 0 # sus 0.2,
    ns (degradeBy 0.8 $ iter 4 $ run 8 |+ root |+ 5) |+| x 0 ,
    ns (struct "1*[2|4]?" $ melo) |+| x 0,
    ns (struct "1*8?" $ irand 8)  |+| x 2,
    silence] 
    # size (9) # speed 30 # z (-2) # y (perlin*2),
    c1 (0.2 + (slow 4 $ perlin*0.7)),
    c2 (slow 3 $ sine),
    c3 0.1,
    c4 ( slow 5.5 $ 0.2*perlin),
    c5 0.3,
    c6 0.8,
    silence] 
  d1 $ s "bd"
  m2 $ stack[
    ns ("-11" |+ root ) # sus 0.7,
    silence] 
    # z 3
    # size 40 # speed 10 
    |-| x 12
    # y (-0.5)
  m2 $ stack[
    -- ns ("{0 [4 5] 0*2 ~ [9 10] 5}%4" |+ root |- 11 ), -- # sus 0.7,
    --ns ("{0 0*2 ~ 5 10*2}%4" |+ root |- 11 ) # sus 0.1,
    -- degradeBy 0.9 $ ns (struct (slow 8 $ ascii "reserve_") $ ("0*16" |+irand 16) |+ root |- 1 ) # sus 0.08,
    ns ("-11" |+ root ) # sus 0.7,
    silence] 
    # z 0
  m1 silence
  m3 $ stack[
    stack[
      ns (arpg $ "[0,1,2,<4 6 9 7>]" |+ root) # size 5 # speed 20 # y "<0 0.5>" # x (slow 2 saw) # z (-1) ,
      ns ("[0,1,2,<4 6 9 7>]" |+ root) # size 5 # speed 20 # y "<0 0.5>",
      ns (slow 4 $ repeatCycles 4 $ struct ("1") (irand 12)),
      ns (slow 2 $ repeatCycles 4 $ struct ("1") ("-7" |+ irand 12)),
      ns (slow 4 $ repeatCycles 4 $ struct ("1(5,8)") ("-14" |+ irand 14)),
      silence],
    c1 0.1,
    c2 0.9,
    c3 0.2,
    c4 0.9,
    silence] 
  m3 $ stack[
    ns ("[0,2]" |- 5),
    -- ns (repeatCycles 4 $ slow 2 $ off 0.125 (+"[2|3]") $ struct ("11011011") (run 10)) # sus 0.1#size 10,
    -- ns (repeatCycles 4 $ (0.5 ~>) $  shuffle 4 $ struct (binary 47896) (run (choose([14,12,10])))),
    ns (slow 2 $ repeatCycles 1 $ struct ("1(7,16)") ("-2" |+ run 10 |+ irand 4)) # sus 0.05 # size 1 # y rand |-| x 10,
    ns (slow 2 $ repeatCycles 4 $ struct ("1(3,8)") ("-7" |+ irand 12)),
    -- ns (slow 2 $ repeatCycles 4 $ struct ("1(5,8)") ("-14" |+ irand 14)),
    -- ns (slow 2 $ repeatCycles 4 $ struct ("1(<7 5>,<16 8>)") ("-10" |+ irand 10)),
    stack[
      c1 0.4,
      c2 0.3,
      c3 0.2,
      c4 0.1,
      silence],
    silence] 
  m1 $ stack[
    c1 0.6,
    c2 0.0,
    c3 0.0,
    c4 0.0,
    c5 0.0,
    c6 0.0,
    stack[
    ns (iter 4 $ run 4 |+ root) # sus 0.2 # size 5 # speed 10 |*| x 0.5,
    -- ns (iter 4 $ run 8 |+ root |+ 2) # sus 0.2,
    -- ns (struct "1*2?" $ irand 8)  |+| x 2,
    -- ns (struct "1*2?" $ irand 10 |- 5)  |+| x 2,
    -- ns ("{0 [4 5] 0*2 ~ [9 10] 5}%8" |+ root |- 6 ),
    -- ns (struct "1*8?" $ irand 7 |+ 3)  |+| x 2,
    silence],
    silence]
  m2 $ stack[
    ns ("-11" |+ root ) # sus 0.7,
    silence] 
    # size 20 # speed 10 
    # x 0.5
    # z 0
  d2 $ slow 2 $ "~ sn:3" # speed 0.4
   + dilei 0.5 0.25 0.4
  d3 $ slow 16 $ shuffle 8 $ chop 32 $ s "drums" # hpf 3600
   + dilei 0.5 "<0.125 0.5 0.33>" "0.4 0.8"


do
  let ns p = note (scale "[ritusen majPent]/8" p) -- |+| x (fromIntegral <$> p)*0.1
      root = "[0 -1 -2]/32"
      -- root = "[0 -1 -2 1]/32"
      melo0 = (slow 8 $segment 16 $  perlin*5 + irand 3)
      melo = round <$> melo0 
  hush
  -- panic
  setcps 1
  m1 $ stack[
    stack[
      -- ns (shuffle 4 $cat ["0*8", "0(9,16)", "5*4", "3*8?"] |+ root),
      ns ("1*8" |+ (run 16) |+ irand 4),
      ns ("4*8" |+ (run 8) |+ irand 4),
    silence] 
    # x (slow 4 $ perlin) # size (2 + rand*9) # speed 30 # z (-1) # y (perlin),
    c1 0.6,
    c2 0.1,
    c3 0.1,
    c4 (slow 7.7 $ perlin*0.6),
    c5 0.0,
    c6 0.0,
    silence] 
  m2 $ stack[
    mono $ ns (every 2 (sometimes (+5)) $ "{0 [4 5] 0*2 ~ [9 10] 5}%4" |+ root |- 11 ) # y rand, -- # sus 0.7,
    -- mono $ ns ("{0 [4 5] 0*2 ~ [9 10] 5}%4" |+ root |- 11 ) # y rand, -- # sus 0.7,
    -- ns ("[0(3,8)]/2" |+ root |- 11 ), -- # sus 0.3,
    -- ns ("0(3,8,<0 1>)" |+ root |- 13 ) # sus 0.1,
    silence] 
    # size 10 # speed 10 
    # x 0.5 
  m3 $ stack[
    stack[
      ns ("[10,5](2,8,<0 1 2>)" |+ root),
      ns (repeatCycles 4 $ slow 8 $ struct (ascii "reserve_") (run 10) |- 5),
      ns (repeatCycles 4 $ slow 8 $ struct (ascii "rtoken__") (run 14) |- 9),
      -- ns (repeatCycles 4 $ (0.5 ~>) $  struct (binary 111) (run 10)),
      ns (arpg $ "[0,1,2,<4 6 9 7>]" |+ root) # size 5 # speed 20 # y "<0 0.5>" # x (slow 2 saw) # z (-1) ,
      ns (off 0.125 (+2) $ struct ("1(3,8,<0 1 2>)") (irand 10)) # sus 0.1,
      ns (slow 4 $ repeatCycles 4 $ struct ("1(7,16)") (irand 10)),
      -- ns (slow 2 $ repeatCycles 4 $ struct ("1") ("-7" |+ irand 12)),
      -- ns (slow 4 $ repeatCycles 4 $ struct ("1(5,8)") ("-14" |+ irand 14)),
      -- ns (slow 2 $ repeatCycles 1 $ struct ("1(7,16)") ("-2" |+ run 10 |+ irand 4)) # sus 0.05,
      -- ns (slow 2 $ repeatCycles 4 $ struct ("1") ("-7" |+ irand 12)),
      -- ns (slow 4 $ repeatCycles 4 $ struct ("1(5,8)") ("-14" |+ irand 14)),
        silence],
    c1 0.8,
    c2 0.8,
    c3 (slow 8 $ perlin*0.6),
    c4 (slow 7.7 $ perlin*0.6),
    silence] 
  d1 $  s "<bd*2 bd*1 bd*1 bd*8?>" # n 5 # gain 1.05
  d1 $  s "bd" # n 5 # gain 1.05
  d2 $ slow "4@3 <8 2>" $ shuffle "<16 8 4 32>" $  chop 32 "drums" # hpf 3000 # hpq (slow 8 $ rand*0.3)
    # gain 0.9
    + dilei 0.5 0.5 0.4


  m3 $ stack[
    ns ("[0,2]"),
    -- ns (repeatCycles 4 $ slow 2 $ off 0.125 (+"[2|3]") $ struct ("11011011") (run 10)) # sus 0.1#size 10,
    -- ns (repeatCycles 4 $ (0.5 ~>) $  struct (binary 111) (run 10)),
    ns (slow 2 $ repeatCycles 1 $ struct ("1(7,16)") ("-2" |+ run 10 |+ irand 4)) # sus 0.05,
    ns (slow 2 $ repeatCycles 4 $ struct ("1") ("-7" |+ irand 12)),
    ns (slow 4 $ repeatCycles 4 $ struct ("1(5,8)") ("-14" |+ irand 14)),
    -- -- ns (slow 4 $ repeatCycles 4 $ struct ("1(5,8)") ("-10" |+ irand 10)),
    stack[
      c1 0.1,
      c2 0.2,
      c3 0.2,
      c4 0.3,
      c6 0.1,
      silence],
    silence] 

  d3 $ slow 16 $ shuffle 8 $ chop 32 $ s "drums" # hpf 3600
   + dilei 0.5 0.25 0.4

  m1 $ stack[
    c1 0.2,
    c2 0.3,
    c3 0.3,
    c4 0.2,
    c5 0.3,
    c6 0.4,
    stack[
    ns (iter 4 $ run 4 |+ root) # sus 0.2 # size 5 # speed 10 |*| x 0.5,
    ns (iter 4 $ run 8 |+ root |+ 2) # sus 0.2,
    ns (struct "1*8?" $ irand 8)  |+| x 2,
    ns ("{0 [4 5] 0*2 ~ [9 10] 5}%8" |+ root |- 6 ),
    -- ns (struct "1*8?" $ irand 7 |+ 3)  |+| x 2,
    silence],
    silence]
  m2 $ stack[
    ns ("-11" |+ root ) # sus 0.7,
    silence] 
    # size 20 # speed 10 
    # x 0.5
    # z 0


do
  let ns p = note (scale "[ritusen majPent]/8" p) -- |+| x (fromIntegral <$> p)*0.1
      root = "[0 -1 -2]/32"
      -- root = "[0 -1 -2 1]/32"
      melo0 = (slow 8 $segment 16 $  perlin*5 + irand 3)
      melo = round <$> melo0 
  hush
  -- panic
  setcps 1
  d0 $ slow 2 $ s "bd"
    # x 0.5 # size 20 # speed 20 # z (-1) # y 0.5
  m1 $ stack[
      -- ns ("1" |+ (run 8) |+ irand 4),
    silence] 
    # x 0.5 # size 20 # speed 20 # z (-1) # y 0.5
